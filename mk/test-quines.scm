(load "test-check.scm")
(load "evalo.scm")

(test "1 quine"
  (run 1 (q) (evalo q q))
  '((((lambda (_.0) (list _.0 (list 'quote _.0)))
      '(lambda (_.0) (list _.0 (list 'quote _.0))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))))

(test "2 quines"
  (run 2 (q) (evalo q q))
  '((((lambda (_.0) (list _.0 (list 'quote _.0)))
      '(lambda (_.0) (list _.0 (list 'quote _.0))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (((lambda (_.0)
        (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
      '(lambda (_.0)
         (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))))

(test "3 quines"
  (run 3 (q) (evalo q q))
  '((((lambda (_.0) (list _.0 (list 'quote _.0)))
      '(lambda (_.0) (list _.0 (list 'quote _.0))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (((lambda (_.0)
        (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
      '(lambda (_.0)
         (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0)))
      '(lambda (_.0)
         (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))))

(test "5 quines"
  (run 5 (q) (evalo q q))
  '((((lambda (_.0) (list _.0 (list 'quote _.0)))
      '(lambda (_.0) (list _.0 (list 'quote _.0))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (((lambda (_.0)
        (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
      '(lambda (_.0)
         (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0)))
      '(lambda (_.0)
         (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
      '(list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (((lambda (_.0)
        (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0)))
      '(lambda (_.0)
         (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))))

(test "10 quines"
  (run 10 (q) (evalo q q))
  '((((lambda (_.0) (list _.0 (list 'quote _.0)))
      '(lambda (_.0) (list _.0 (list 'quote _.0))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (((lambda (_.0)
        (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
      '(lambda (_.0)
         (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0)))
      '(lambda (_.0)
         (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
      '(list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (((lambda (_.0)
        (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0)))
      '(lambda (_.0)
         (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))
    (((lambda (_.0)
        ((lambda (_.1) (list _.0 (list 'quote _.0))) '_.2))
      '(lambda (_.0)
         ((lambda (_.1) (list _.0 (list 'quote _.0))) '_.2)))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 ((lambda (_.1) (list 'quote _.0)) '_.2)))
      '(lambda (_.0)
         (list _.0 ((lambda (_.1) (list 'quote _.0)) '_.2))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 (list 'quote ((lambda (_.1) _.0) '_.2))))
      '(lambda (_.0)
         (list _.0 (list 'quote ((lambda (_.1) _.0) '_.2)))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        ((lambda (_.1) (list _.1 (list 'quote _.1))) _.0))
      '(lambda (_.0)
         ((lambda (_.1) (list _.1 (list 'quote _.1))) _.0)))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list _.0 ((lambda (_.1) (list 'quote _.1)) _.0)))
      '(lambda (_.0)
         (list _.0 ((lambda (_.1) (list 'quote _.1)) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))))

(test "40 quines"
  (run 40 (q) (evalo q q))
  '((((lambda (_.0) (list _.0 (list 'quote _.0)))
      '(lambda (_.0) (list _.0 (list 'quote _.0))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (((lambda (_.0)
        (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))
      '(lambda (_.0)
         (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0)))
      '(lambda (_.0)
         (list _.0 (list ((lambda (_.1) 'quote) '_.2) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
      '(list (list 'lambda '(_.0) _.0) (list 'quote _.0)))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (((lambda (_.0)
        (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0)))
      '(lambda (_.0)
         (list _.0 (list ((lambda (_.1) _.1) 'quote) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))
    (((lambda (_.0)
        ((lambda (_.1) (list _.0 (list 'quote _.0))) '_.2))
      '(lambda (_.0)
         ((lambda (_.1) (list _.0 (list 'quote _.0))) '_.2)))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 ((lambda (_.1) (list 'quote _.0)) '_.2)))
      '(lambda (_.0)
         (list _.0 ((lambda (_.1) (list 'quote _.0)) '_.2))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 (list 'quote ((lambda (_.1) _.0) '_.2))))
      '(lambda (_.0)
         (list _.0 (list 'quote ((lambda (_.1) _.0) '_.2)))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        ((lambda (_.1) (list _.1 (list 'quote _.1))) _.0))
      '(lambda (_.0)
         ((lambda (_.1) (list _.1 (list 'quote _.1))) _.0)))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list _.0 ((lambda (_.1) (list 'quote _.1)) _.0)))
      '(lambda (_.0)
         (list _.0 ((lambda (_.1) (list 'quote _.1)) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        ((lambda (_.1) (list _.0 (list _.1 _.0))) 'quote))
      '(lambda (_.0)
         ((lambda (_.1) (list _.0 (list _.1 _.0))) 'quote)))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list _.0 ((lambda (_.1) (list _.1 _.0)) 'quote)))
      '(lambda (_.0)
         (list _.0 ((lambda (_.1) (list _.1 _.0)) 'quote))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list _.0 (list 'quote ((lambda (_.1) _.1) _.0))))
      '(lambda (_.0)
         (list _.0 (list 'quote ((lambda (_.1) _.1) _.0)))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          (list ((lambda (_.3) 'quote) '_.4) _.0)))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           (list ((lambda (_.3) 'quote) '_.4) _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.3 closure)) ((_.3 quote)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2) (closure _.4)))
    (((lambda (_.0)
        (list ((lambda (_.1) _.1) _.0) (list 'quote _.0)))
      '(lambda (_.0)
         (list ((lambda (_.1) _.1) _.0) (list 'quote _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list _.0 (list 'quote ((lambda (_.1) _.0) _.0))))
      '(lambda (_.0)
         (list _.0 (list 'quote ((lambda (_.1) _.0) _.0)))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list _.0 ((lambda (_.1) (list 'quote _.0)) _.0)))
      '(lambda (_.0)
         (list _.0 ((lambda (_.1) (list 'quote _.0)) _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        ((lambda (_.1) (list _.1 (list 'quote _.0))) _.0))
      '(lambda (_.0)
         ((lambda (_.1) (list _.1 (list 'quote _.0))) _.0)))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list _.0 (list ((lambda (_.1) 'quote) _.0) _.0)))
      '(lambda (_.0)
         (list _.0 (list ((lambda (_.1) 'quote) _.0) _.0))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          (list ((lambda (_.3) _.3) 'quote) _.0)))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           (list ((lambda (_.3) _.3) 'quote) _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.3 closure)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          ((lambda (_.3) (list 'quote _.0)) '_.4)))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           ((lambda (_.3) (list 'quote _.0)) '_.4))))
     (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
          ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure))
          ((_.3 list)) ((_.3 quote)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2) (closure _.4)))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          (list 'quote ((lambda (_.3) _.0) '_.4))))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           (list 'quote ((lambda (_.3) _.0) '_.4)))))
     (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
          ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2) (closure _.4)))
    (((lambda (_.0)
        (list
          _.0
          (list
            ((lambda (_.1) 'quote) '_.2)
            ((lambda (_.3) _.0) '_.4))))
      '(lambda (_.0)
         (list
           _.0
           (list
             ((lambda (_.1) 'quote) '_.2)
             ((lambda (_.3) _.0) '_.4)))))
     (=/= ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)) ((_.3 closure)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2) (closure _.4)))
    (((lambda (_.0)
        ((lambda (_.1) (list _.0 (list 'quote _.1))) _.0))
      '(lambda (_.0)
         ((lambda (_.1) (list _.0 (list 'quote _.1))) _.0)))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list _.0 (list 'quote ((lambda (_.1) _.0) (list)))))
      '(lambda (_.0)
         (list _.0 (list 'quote ((lambda (_.1) _.0) (list))))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list
          (list 'lambda '(_.0) _.0)
          (list ((lambda (_.1) 'quote) '_.2) _.0)))
      '(list
         (list 'lambda '(_.0) _.0)
         (list ((lambda (_.1) 'quote) '_.2) _.0)))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        ((lambda (_.1)
           (list ((lambda (_.2) _.0) '_.3) (list 'quote _.0)))
         '_.4))
      '(lambda (_.0)
         ((lambda (_.1)
            (list ((lambda (_.2) _.0) '_.3) (list 'quote _.0)))
          '_.4)))
     (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 closure)) ((_.0 lambda))
          ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.1 lambda))
          ((_.1 list)) ((_.1 quote)) ((_.2 closure)))
     (sym _.0 _.1 _.2)
     (absento (closure _.3) (closure _.4)))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          ((lambda (_.3) (list 'quote _.3)) _.0)))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           ((lambda (_.3) (list 'quote _.3)) _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.3 closure)) ((_.3 list))
          ((_.3 quote)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          ((lambda (_.3) (list _.3 _.0)) 'quote)))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           ((lambda (_.3) (list _.3 _.0)) 'quote))))
     (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
          ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure))
          ((_.3 list)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          (list 'quote ((lambda (_.3) _.3) _.0))))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           (list 'quote ((lambda (_.3) _.3) _.0)))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.3 closure)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list _.0 ((lambda (_.1) (list 'quote _.0)) (list))))
      '(lambda (_.0)
         (list _.0 ((lambda (_.1) (list 'quote _.0)) (list)))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list
          _.0
          (list
            ((lambda (_.1) 'quote) '_.2)
            ((lambda (_.3) _.3) _.0))))
      '(lambda (_.0)
         (list
           _.0
           (list
             ((lambda (_.1) 'quote) '_.2)
             ((lambda (_.3) _.3) _.0)))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)) ((_.3 closure)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2)))
    (((lambda (_.0)
        ((lambda (_.1) (list _.0 (list 'quote _.0))) (list)))
      '(lambda (_.0)
         ((lambda (_.1) (list _.0 (list 'quote _.0))) (list))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list ((lambda (_.1) _.0) _.0) (list 'quote _.0)))
      '(lambda (_.0)
         (list ((lambda (_.1) _.0) _.0) (list 'quote _.0))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list
          (list 'lambda '(_.0) _.0)
          (list ((lambda (_.1) _.1) 'quote) _.0)))
      '(list
         (list 'lambda '(_.0) _.0)
         (list ((lambda (_.1) _.1) 'quote) _.0)))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1))
    (((lambda (_.0)
        ((lambda (_.1) (list _.0 (list 'quote _.0))) _.0))
      '(lambda (_.0)
         ((lambda (_.1) (list _.0 (list 'quote _.0))) _.0)))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1))
    (((lambda (_.0)
        (list
          (list 'lambda '(_.0) _.0)
          ((lambda (_.1) (list 'quote _.0)) '_.2)))
      '(list
         (list 'lambda '(_.0) _.0)
         ((lambda (_.1) (list 'quote _.0)) '_.2)))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 list)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          (list 'quote ((lambda (_.3) _.0) _.0))))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           (list 'quote ((lambda (_.3) _.0) _.0)))))
     (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
          ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2)))
    (((lambda (_.0)
        (list
          ((lambda (_.1) _.0) '_.2)
          ((lambda (_.3) (list 'quote _.0)) _.0)))
      '(lambda (_.0)
         (list
           ((lambda (_.1) _.0) '_.2)
           ((lambda (_.3) (list 'quote _.0)) _.0))))
     (=/= ((_.0 _.1)) ((_.0 _.3)) ((_.0 closure)) ((_.0 lambda))
          ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.3 closure))
          ((_.3 list)) ((_.3 quote)))
     (sym _.0 _.1 _.3)
     (absento (closure _.2)))
    (((lambda (_.0)
        ((lambda (_.1)
           (list ((lambda (_.2) _.0) '_.3) (list _.1 _.0)))
         'quote))
      '(lambda (_.0)
         ((lambda (_.1)
            (list ((lambda (_.2) _.0) '_.3) (list _.1 _.0)))
          'quote)))
     (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 closure)) ((_.0 lambda))
          ((_.0 list)) ((_.0 quote)) ((_.1 closure)) ((_.1 lambda))
          ((_.1 list)) ((_.1 quote)) ((_.2 closure)))
     (sym _.0 _.1 _.2)
     (absento (closure _.3)))))

(test "2 twines"
  (run 2 (x) (fresh (p q)
               (=/= p q)
               (evalo p q)
               (evalo q p)
               (== `(,p ,q) x)))
  '((('((lambda (_.0)
          (list 'quote (list _.0 (list 'quote _.0))))
        '(lambda (_.0) (list 'quote (list _.0 (list 'quote _.0)))))
      ((lambda (_.0) (list 'quote (list _.0 (list 'quote _.0))))
       '(lambda (_.0) (list 'quote (list _.0 (list 'quote _.0))))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    (('((lambda (_.0)
          (list
            'quote
            (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
        '(lambda (_.0)
           (list
             'quote
             (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))
      ((lambda (_.0)
         (list
           'quote
           (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))
       '(lambda (_.0)
          (list
            'quote
            (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))))

(test "4 thrines"
  (run 4 (x)
    (fresh (p q r)
      (=/= p q)
      (=/= q r)
      (=/= r p)
      (evalo p q)
      (evalo q r)
      (evalo r p)
      (== `(,p ,q ,r) x)))
  '(((''((lambda (_.0)
           (list 'quote (list 'quote (list _.0 (list 'quote _.0)))))
         '(lambda (_.0)
            (list 'quote (list 'quote (list _.0 (list 'quote _.0))))))
      '((lambda (_.0)
          (list 'quote (list 'quote (list _.0 (list 'quote _.0)))))
        '(lambda (_.0)
           (list 'quote (list 'quote (list _.0 (list 'quote _.0))))))
      ((lambda (_.0)
         (list 'quote (list 'quote (list _.0 (list 'quote _.0)))))
       '(lambda (_.0)
          (list 'quote (list 'quote (list _.0 (list 'quote _.0)))))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    ((''((lambda (_.0)
           (list
             'quote
             (list
               'quote
               (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))
         '(lambda (_.0)
            (list
              'quote
              (list
                'quote
                (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))))
      '((lambda (_.0)
          (list
            'quote
            (list
              'quote
              (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))
        '(lambda (_.0)
           (list
             'quote
             (list
               'quote
               (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0))))))
      ((lambda (_.0)
         (list
           'quote
           (list
             'quote
             (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))
       '(lambda (_.0)
          (list
            'quote
            (list
              'quote
              (list ((lambda (_.1) _.0) '_.2) (list 'quote _.0)))))))
     (=/= ((_.0 _.1)) ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)))
     (sym _.0 _.1)
     (absento (closure _.2)))
    (('(list
         '(lambda (_.0)
            (list
              'quote
              (list 'list _.0 (list 'quote (list 'quote _.0)))))
         '''(lambda (_.0)
              (list
                'quote
                (list 'list _.0 (list 'quote (list 'quote _.0))))))
      (list
        '(lambda (_.0)
           (list
             'quote
             (list 'list _.0 (list 'quote (list 'quote _.0)))))
        '''(lambda (_.0)
             (list
               'quote
               (list 'list _.0 (list 'quote (list 'quote _.0))))))
      ((lambda (_.0)
         (list
           'quote
           (list 'list _.0 (list 'quote (list 'quote _.0)))))
       ''(lambda (_.0)
           (list
             'quote
             (list 'list _.0 (list 'quote (list 'quote _.0)))))))
     (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
     (sym _.0))
    ((''((lambda (_.0)
           (list
             ((lambda (_.1) 'quote) '_.2)
             (list 'quote (list _.0 (list 'quote _.0)))))
         '(lambda (_.0)
            (list
              ((lambda (_.1) 'quote) '_.2)
              (list 'quote (list _.0 (list 'quote _.0))))))
      '((lambda (_.0)
          (list
            ((lambda (_.1) 'quote) '_.2)
            (list 'quote (list _.0 (list 'quote _.0)))))
        '(lambda (_.0)
           (list
             ((lambda (_.1) 'quote) '_.2)
             (list 'quote (list _.0 (list 'quote _.0))))))
      ((lambda (_.0)
         (list
           ((lambda (_.1) 'quote) '_.2)
           (list 'quote (list _.0 (list 'quote _.0)))))
       '(lambda (_.0)
          (list
            ((lambda (_.1) 'quote) '_.2)
            (list 'quote (list _.0 (list 'quote _.0)))))))
     (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
          ((_.0 quote)) ((_.1 closure)) ((_.1 quote)))
     (sym _.0 _.1)
     (absento (closure _.2)))))
